//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34014
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFConsoleApplication1.ServiceHost {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceHost.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        WcfService2.CompositeType GetDataUsingDataContract(WcfService2.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<WcfService2.CompositeType> GetDataUsingDataContractAsync(WcfService2.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Add", ReplyAction="http://tempuri.org/IService1/AddResponse")]
        int Add(int i, int j);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Add", ReplyAction="http://tempuri.org/IService1/AddResponse")]
        System.Threading.Tasks.Task<int> AddAsync(int i, int j);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Minus", ReplyAction="http://tempuri.org/IService1/MinusResponse")]
        int Minus(int i, int j);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Minus", ReplyAction="http://tempuri.org/IService1/MinusResponse")]
        System.Threading.Tasks.Task<int> MinusAsync(int i, int j);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Factorial", ReplyAction="http://tempuri.org/IService1/FactorialResponse")]
        int Factorial(int i);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Factorial", ReplyAction="http://tempuri.org/IService1/FactorialResponse")]
        System.Threading.Tasks.Task<int> FactorialAsync(int i);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FactorialMyNumber", ReplyAction="http://tempuri.org/IService1/FactorialMyNumberResponse")]
        int FactorialMyNumber(WcfService2.Number1 n);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/FactorialMyNumber", ReplyAction="http://tempuri.org/IService1/FactorialMyNumberResponse")]
        System.Threading.Tasks.Task<int> FactorialMyNumberAsync(WcfService2.Number1 n);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WCFConsoleApplication1.ServiceHost.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WCFConsoleApplication1.ServiceHost.IService1>, WCFConsoleApplication1.ServiceHost.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public WcfService2.CompositeType GetDataUsingDataContract(WcfService2.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<WcfService2.CompositeType> GetDataUsingDataContractAsync(WcfService2.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public int Add(int i, int j) {
            return base.Channel.Add(i, j);
        }
        
        public System.Threading.Tasks.Task<int> AddAsync(int i, int j) {
            return base.Channel.AddAsync(i, j);
        }
        
        public int Minus(int i, int j) {
            return base.Channel.Minus(i, j);
        }
        
        public System.Threading.Tasks.Task<int> MinusAsync(int i, int j) {
            return base.Channel.MinusAsync(i, j);
        }
        
        public int Factorial(int i) {
            return base.Channel.Factorial(i);
        }
        
        public System.Threading.Tasks.Task<int> FactorialAsync(int i) {
            return base.Channel.FactorialAsync(i);
        }
        
        public int FactorialMyNumber(WcfService2.Number1 n) {
            return base.Channel.FactorialMyNumber(n);
        }
        
        public System.Threading.Tasks.Task<int> FactorialMyNumberAsync(WcfService2.Number1 n) {
            return base.Channel.FactorialMyNumberAsync(n);
        }
    }
}
